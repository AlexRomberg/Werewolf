import{P as se,a as G,b as ne,e as h}from"./chunk-S6VIYWOS.js";var p=function(i){return i[i.Love=0]="Love",i[i.Trust=1]="Trust",i[i.Sleepover=2]="Sleepover",i;}(p||{}),n=function(i){return i[i.Wolves=0]="Wolves",i[i.Active=1]="Active",i[i.Passive=2]="Passive",i[i.Loners=3]="Loners",i;}(n||{}),s=function(i){return i[i.BaseGame=0]="BaseGame",i[i.NewMoon=1]="NewMoon",i[i.Characters=2]="Characters",i[i.Special=3]="Special",i;}(s||{}),c=function(i){return i[i.Initial=0]="Initial",i[i.Wolf=50]="Wolf",i[i.PostWolf=100]="PostWolf",i;}(c||{}),f=function(i){return i[i.DiedGotKilled=0]="DiedGotKilled",i[i.DiedSleptWithVictim=1]="DiedSleptWithVictim",i[i.DiedOfBrokenHeart=2]="DiedOfBrokenHeart",i[i.TurnedIntoWolf=3]="TurnedIntoWolf",i;}(f||{}),de=function(i){return i[i.PeopleSelection=0]="PeopleSelection",i[i.PersonDetails=1]="PersonDetails",i[i.CharacterDetails=2]="CharacterDetails",i[i.Confirm=3]="Confirm",i[i.Changes=4]="Changes",i;}(de||{});var ae={rules:"Rules & Beginning",night:"Dusk",day:"Dawn",angel:"The Angel",bear_guide:"The Bear Guide",big_wolf:"The Big Bad Wolf",hoodrat:"The Hoodrat",brothers:"The Three Brothers",cupid:"The Cupid",flute_player:"The Flute Player",fox:"The Fox",healer:"The Healer",hunter:"The Hunter",judge:"The Judge",juggler:"The Juggler",knight:"The Knight of the Rusty Blade",maid:"The Devoted Maid",old_man:"The Old Man",bitter_old_man:"The Bitter Old Man",primal_wolf:"The Primal Wolf",scapegoat:"The Scapegoat",seer:"The Seer",sisters:"The Two Siblings",small_child:"The Little Girl",thief:"The Thief",village_idiot:"The Village Idiot",villager:"The Simple Villager",werewolf:"The Simple Werewolf",white_wolf:"The white wolf",wild_child:"The Wild Child",witch:"The Witch",wolfdog:"The Wolfdog"},we={[n.Wolves]:"Werewolves",[n.Active]:"Active",[n.Passive]:"Passive",[n.Loners]:"Single players"},ze={[s.BaseGame]:"Base game",[s.NewMoon]:"New Moon",[s.Characters]:"Characters",[s.Special]:"Special"},be={[f.DiedGotKilled]:"died (victim of werewolf/witch)",[f.DiedOfBrokenHeart]:"died (broken heart)",[f.DiedSleptWithVictim]:"died (slept with victim)",[f.TurnedIntoWolf]:"turned into a werewolf (DON'T MENTION)"};var oe={spotify:{clientId:"bd8b387ab37c4b43a990548365142512",redirectUri:"https://wolf.aro-playground.ch/spotify",authUrl:"https://accounts.spotify.com/authorize",tokenUrl:"https://accounts.spotify.com/api/token",apiBaseUrl:"https://api.spotify.com/v1",playlists:{start:"7MZroPhY9XfndSpZXlWqFL",special:"45oHQwFkR2ylWUieL1SHoO",general:"4ye5jeTcpDzl59S7zPhzP0"}},isTesting:!1};var l=i=>({Title:"Assign person",Action:r=>h(void 0,[r],function*({GameState:e,Dialog:t}){try{let a=yield t.ShowPeopleSelectionDialog("Select person",1);console.log("closed",a);for(let d of e.getPeopleForCharacter(i)??[])d.Character=void 0;a[0].Character=i;}catch{}})}),z=(i,e)=>({Title:"Assign people",Action:a=>h(void 0,[a],function*({GameState:t,Dialog:r}){try{let d=yield r.ShowPeopleSelectionDialog("Select people",e);for(let u of t.getPeopleForCharacter(i)??[])u.Character=void 0;for(let u of d)u.Character=i;}catch{}})});var o=class{get isAssigned(){return this.gameState.getPeopleForCharacter(this).length>0;}constructor(e){this.gameState=e,this.IsSingle=!0,this.Priority=-1,this.IsAwakeThisNight=(t,r)=>!1,this.resetAfterNight=()=>{},this.GetActions=()=>[],this.GetButtons=()=>[];}};var b=class extends o{constructor(){super(...arguments),this.Id="bear_guide",this.Group=n.Passive,this.Game=s.Characters,this.Priority=c.Initial+9,this.Description=[{title:"General",description:"Every morning, directly after the announcement of the night's victims, the narrator growls like a bear if one of the bear leader's immediate neighbours is a werewolf. Only neighbours who are still in the game are taken into account."},{title:"Hint for the narrator",description:"It simplifies the game if eliminated players do not remain in the round of active players. If the bear leader himself is infected by the primal wolf, you grumble every round until the bear leader is eliminated."}],this.GetActions=()=>[!this.isAssigned&&"Assign person","If he is sitting next to a werewolf or is infected, inform the village in the morning"],this.GetButtons=()=>this.isAssigned?[]:[l(this)],this.IsAwakeThisNight=e=>e<=0;}};var g=class i extends o{isWerewolf(e){return e.Character instanceof i||e.IsWerewolf;}};var P=class{constructor(e){this.gameState=e,this.Id="rules",this.GetActions=()=>["Explain rules",this.getWerewolfCharacters().length>0&&"Mention number of werewolves ("+this.gameState.SelectedCharacters.filter(t=>t instanceof g).map(t=>ae[t.Id]).join(", ")+")","Tell entry story"],this.GetButtons=()=>[],this.getWerewolfCharacters=()=>this.gameState.SelectedCharacters.filter(t=>t instanceof g);}},ce={Id:"night",GetActions:()=>["And the village falls asleep"],GetButtons:()=>[]},C=class{constructor(e){this.gameState=e,this.Id="day",this.GetActions=()=>["And the village awakens",this.gameState.Changes.length>0&&"Inform about the deaths (Show changes)",this.gameState.Changes.length<=0&&"No deaths this night",this.gameState.SelectedCharacters.some(t=>t instanceof b)&&"Remember the bear guide","Start the discussion"],this.GetButtons=()=>this.gameState.Changes.length>0?[{Title:"Show changes",Action:({Dialog:t})=>{t.ShowChangesDialog(this.gameState.Changes);}}]:[];}};var k=class extends o{constructor(){super(...arguments),this.Id="angel",this.Group=n.Loners,this.Game=s.Characters,this.Description=[{title:"General",description:"If this character is in the game, the first round always begins with a day and the corresponding vote - even before the first night dawns and the special characters are called for the first time. If the angel succeeds in attracting the distrust of the village in this vote or becomes the target of the lycanthropes' devouring retribution during the first night and is eliminated in one way or another, he wins the game. The game master can then immediately start a new game. If this does not happen, the angel turns into a normal villager, which it remains until the end of the game or until its death."},{title:"Hint for the narrator",description:"Do not hesitate to remind them of the possible presence of the angel on the first day! The discussions will then be livelier and the talkers will be protected by this heavenly threat."}];}};var W=class extends g{constructor(){super(...arguments),this.Id="big_wolf",this.Group=n.Wolves,this.Game=s.Characters,this.Priority=c.Wolf+4,this.Description=[{title:"General",description:"Every night, the Big Bad Wolf wakes up with the other wolves and looks for a victim. However, as long as no werewolf, the Wild Child (as a wolf) or the Wolfdog (as a wolf) has been eliminated, it wakes up again immediately after the wolf phase, but alone, and looks for another victim. It may not eat a werewolf."}],this.isDone=!1,this.GetActions=()=>[!this.isAssigned&&"Assign person",!this.isDone&&"Can define a second vitim"],this.GetButtons=()=>{let e=[];return this.isAssigned||e.push(l(this)),this.isDone||e.push({Title:"Mark second victim",Action:this.registerVictim.bind(this)}),e;},this.IsAwakeThisNight=(e,t)=>!t.People.some(r=>r.IsDead&&this.isWerewolf(r)),this.resetAfterNight=()=>this.isDone=!1;}registerVictim(t){return h(this,arguments,function*({Dialog:e}){try{let r=yield e.ShowPeopleSelectionDialog("Select the second victim (not a werewolf)",1);if(r[0].IsProtected||r[0].IsVictim)return;r[0].IsVictim=!0,this.isDone=!0;}catch{}});}};var I=class extends o{constructor(){super(...arguments),this.Id="hoodrat",this.Group=n.Active,this.Game=s.Special,this.Priority=c.Initial+11,this.Description=[{title:"General",description:"If the hoodrat is called before the werewolves at night, it can choose to stay with another player that night. If this player dies during the night, it dies with them. If the hoodrat is haunted by the werewolves while it is with another player, it is spared."},{title:"Attention",description:"The hoodrat can also stay at home. It may not stay with the same player on two consecutive nights. The player applies the witch's potions and the healer's protection to the hoodrat, but not vice versa."}],this.GetActions=()=>[!this.isAssigned&&"Assign person",!this.isDone&&"Can search a new home for the night",this.isDone&&"Is done for the night"],this.GetButtons=()=>{let e=[];return this.isAssigned?this.isDone||e.push({Title:"Assign host",Action:this.requestHostPerson.bind(this)}):e.push(l(this)),e;},this.IsAwakeThisNight=()=>!0,this.resetAfterNight=()=>{this.gameState.removeConnection(p.Sleepover);};}get isDone(){return this.gameState.Connections.some(e=>e.ConnectionType===p.Sleepover);}requestHostPerson(r){return h(this,arguments,function*({Dialog:e,GameState:t}){try{let a=yield e.ShowPeopleSelectionDialog("Select a person",1);if(a[0]===this.lastJoinedPerson&&!(yield e.ShowConfirmDialog("The same person may not be chosen twice in succession. Proceed anyway?")))return;this.lastJoinedPerson=a[0],t.addConnection(p.Sleepover,this.gameState.getPeopleForCharacter(this)[0],a[0]);}catch{}});}};var y=class extends o{constructor(){super(...arguments),this.Id="brothers",this.Group=n.Active,this.Game=s.Characters,this.Priority=c.Initial+7,this.IsSingle=!1,this.Description=[{title:"General",description:"The three brothers are of the same ilk as the other villagers and pull in the same direction. On the first night, after being called by the narrator, the brothers wake up to get to know each other. In experienced rounds, the narrator can wake the Three Brothers from time to time (every second round or as desired) to allow them to quickly and quietly agree on how to proceed."},{title:"Hint for the narrator",description:"Just like the Two Sisters, the Three Brothers are a powerful instrument in the hands of players who are proficient in sign language. They should only be used in large game rounds. In very large rounds, it is advisable to use the Two Sisters as well."}],this.GetActions=()=>[this.gameState.getPeopleForCharacter(this).length!==3&&"Assign people","May exchange information with each other"],this.GetButtons=()=>this.gameState.getPeopleForCharacter(this).length===3?[]:[z(this,3)],this.IsAwakeThisNight=e=>e%2===0;}};var T=class extends o{constructor(){super(...arguments),this.Id="cupid",this.Group=n.Active,this.Game=s.BaseGame,this.Priority=c.Initial+3,this.Description=[{title:"General",description:"On the first night (introductory round), he chooses the two players (regardless of gender) who fall in love with each other. Cupid can also choose himself as one of the lovers. If one of the two lovers is eliminated, the other lover dies of grief and is also eliminated immediately. A lover may never vote against their lover or harm them in any other way (not even to deceive them)."},{title:"Attention",description:"If one of the two lovers is a werewolf and the other a villager, these two players have a new game objective: in order to continue living together in love and win the game, they must eliminate all other players, both villagers and werewolves, in accordance with the rules of the game."}],this.GetActions=()=>[!this.isAssigned&&"Assign person",!this.isDone&&"Must select a couple","The couple must wake up"],this.GetButtons=()=>{let e=[];return this.isAssigned||e.push(l(this)),this.isDone||e.push({Title:"Assign couple",Action:this.requestCouple.bind(this)}),e;},this.IsAwakeThisNight=e=>e===0;}get isDone(){return this.gameState.Connections.some(e=>e.ConnectionType===p.Love);}requestCouple(r){return h(this,arguments,function*({GameState:e,Dialog:t}){try{let a=yield t.ShowPeopleSelectionDialog("Select a couple",2);e.addConnection(p.Love,a[0],a[1]);}catch{}});}};var x=class extends o{constructor(){super(...arguments),this.Id="flute_player",this.Group=n.Loners,this.Game=s.NewMoon,this.Priority=c.PostWolf+2,this.Description=[{title:"General",description:"Each night, when the narrator calls the flute player, the flute player chooses two players whose shoulders the narrator touches. The flute player falls asleep again. The narrator instructs the new and already enchanted players to wake up. They recognise each other and fall asleep again. From the point at which there are no more players who are not enchanted, the flute player wins against all other players (even if this happens through a vote or thanks to the werewolves)."},{title:"Attention",description:"The flute player cannot enchant himself. The healer does not protect against the enchantment, and the witch cannot heal the enchantment. The werewolves are not immune to the enchantment. The enchanted players retain all their abilities and characteristics. The enchantment does not transfer between lovers."}],this.GetActions=()=>[!this.isAssigned&&"Assign person","Can cast a spell on a person"],this.GetButtons=()=>{let e=[];return this.isAssigned||e.push(l(this)),this.isDone||e.push({Title:"Select victims",Action:this.registerVictim.bind(this)}),e;},this.IsAwakeThisNight=()=>!0;}get isDone(){return this.gameState.People.some(e=>e.IsEnchanted);}registerVictim(t){return h(this,arguments,function*({Dialog:e}){try{let r=yield e.ShowPeopleSelectionDialog("Select two victims",2);for(let a of r)a.IsEnchanted=!0;}catch{}});}};var N=class extends o{constructor(){super(...arguments),this.Id="fox",this.Group=n.Active,this.Game=s.Characters,this.Priority=c.Initial+5,this.Description=[{title:"General",description:"At night, when called by the narrator, the fox wakes up and may choose a group of three neighbours by pointing to the middle person. If there is at least one werewolf in this group, the narrator indicates this to the fox. In this case, the fox may use his ability again the following night. If there is no werewolf in the chosen group, the fox loses its powers. However, he now has the valuable information as to which three players are above suspicion."},{title:":@@character-description-hint:Hinweis",description:"The narrator calls the fox every night, but it does not have to use its special ability every night."},{title:"Hint for the narrator",description:"The fox is not shown the cards of the selected players, he is only informed whether there is (at least) one werewolf among them or not."}],this.hasMisssed=!1,this.GetActions=()=>[!this.isAssigned&&"Assign person",!this.hasMisssed&&this.gameState.Round>0&&"May point at a person. If this person / one of their neighbors is a werewolf, confirm",this.hasMisssed&&"Has no fuction anymore"],this.GetButtons=()=>{let e=[];return this.isAssigned||e.push(l(this)),!this.hasMisssed&&this.gameState.Round>0&&e.push({Title:"Has missed",Action:()=>{this.hasMisssed=!0;}}),e;},this.IsAwakeThisNight=()=>!this.hasMisssed;}};var S=class extends o{constructor(){super(...arguments),this.Id="small_child",this.Group=n.Active,this.Game=s.BaseGame,this.Description=[{title:"General",description:"The little girl may spy on the werewolves during her waking phase with half-open eyes. However, if she is caught by the werewolves, she may be eaten immediately (silently) instead of the originally intended victim and is eliminated. The girl can only spy at night while the werewolves are awake. Under no circumstances may she pretend to be a werewolf and open her eyes wide."}];}};var V=class extends o{constructor(){super(...arguments),this.Id="healer",this.Group=n.Active,this.Game=s.NewMoon,this.Priority=c.Initial+10,this.Description=[{title:"General",description:"When the healer is called before the werewolves at night, he shows the narrator a player. The player chosen in this way will be protected against the werewolves that night (and only that night). If he is chosen by them as a victim, he is not eliminated from the game."},{title:"Attention",description:"The healer has the right to protect himself. The healer may not protect the same player on two consecutive nights. The healer's protection has no effect on the little girl. (She is currently in a total puberty crisis and there is nothing to stop her from looking for trouble). The healer cannot protect against the flute player or the infection from the primal wolf."}],this.GetActions=()=>[!this.isAssigned&&"Assign person",!this.isDone&&"Can choose a person who is immortal this night",this.isDone&&"Is done for the night"],this.GetButtons=()=>{let e=[];return this.isAssigned||e.push(l(this)),this.isDone||e.push({Title:"Protect person",Action:this.requestProtectedPerson.bind(this)}),e;},this.IsAwakeThisNight=()=>!0;}get isDone(){return this.gameState.People.some(e=>e.IsProtected);}requestProtectedPerson(t){return h(this,arguments,function*({Dialog:e}){try{let r=yield e.ShowPeopleSelectionDialog("Select person to be protected",1);if(r[0]===this.lastProtectedPerson){if(!(yield e.ShowConfirmDialog("The same person cannot be protected twice in succession. Proceed anyway?")))return;}else if(r[0].Character instanceof S&&!(yield e.ShowConfirmDialog("The little girl cannot be protected from the werewolves. Proceed anyway?")))return;this.lastProtectedPerson=r[0],r[0].IsProtected=!0;}catch{}});}};var B=class extends o{constructor(){super(...arguments),this.Id="hunter",this.Group=n.Passive,this.Game=s.BaseGame,this.Description=[{title:"General",description:"If he is eaten by the werewolves or executed by the villagers, he may defend himself before his death and choose any player who is also eliminated."},{title:":@@character-description-special-case:Sonderfall",description:"If the hunter is in love with a player who is eliminated from the game, he can immediately nominate another player of his choice before his own elimination, who is also eliminated. This can result in not a single player surviving. In this case, neither camp has won."}];}};var E=class extends o{constructor(){super(...arguments),this.Id="juggler",this.Group=n.Passive,this.Game=s.Characters,this.Priority=c.Initial+2,this.Description=[{title:"General",description:"Before the game, the narrator chooses three characters with special abilities, which he places face up in the centre of the playing area after the roles have been dealt. Each night, after being called by the narrator, the juggler may choose one of these cards and embody the chosen character until the next night. If the juggler chooses a character, the narrator removes this card from the selection and removes it from the game."},{title:"Attention",description:"No wolf may be chosen for the display."},{title:"Hint for the narrator",description:"By choosing the cards you offer the juggler, you can influence the game and spread a little chaos in the village - or help to counteract a very strong pack of wolves. If the thief is also in the game, the two cards for the thief must be laid out first, followed by the three cards for the juggler."}],this.GetActions=()=>[!this.isAssigned&&"Assign person","Must choose a role"],this.GetButtons=()=>this.isAssigned?[]:[l(this)],this.IsAwakeThisNight=()=>!0;}};var _=class extends o{constructor(){super(...arguments),this.Id="knight",this.Group=n.Passive,this.Game=s.Characters,this.Description=[{title:"General",description:"If the knight is eaten, he is eliminated from the game - but one wolf is poisoned by the rusty blade. Of the guilty wolves, the one closest to the knight on the left succumbs to its fatal wound the following night, having survived for a whole day despite its injury. The wolf's death by poisoning is announced by the narrator in the morning, after the night of his demise."},{title:":@@character-description-hint:Hinweis",description:"Clever players can now deduce that all players sitting between the \"Knight of the Rusty Blade\" and the diseased werewolf are innocent villagers."}];}};var R=class extends o{constructor(){super(...arguments),this.Id="old_man",this.Group=n.Passive,this.Game=s.Characters,this.Description=[{title:"General",description:"He has victoriously overcome all the terrible trials of life and achieved a resilience beyond the ordinary. The werewolves have to choose him twice to devour him. The first time, as soon as the werewolves tear the old man of the village, he survives and the narrator does not turn over his card. The original wolf cannot infect him after the first bite either. The old man is only eliminated as soon as he is devoured twice. However, the village's vote, the witch's poison potion, the hunter's shot or the barber's razor will eliminate the old man the first time. However, the villagers lose their special abilities out of despair at having killed such a highly learned man."},{title:"Attention",description:"When the old man is healed by the witch, he only gains a single life."},{title:"Variant for Brave",description:"If the village idiot is already revealed, he is eliminated together with the old man, as the village, which has now lost its wisdom, revises its decision to spare the village idiot."}];}};var F=class extends o{constructor(){super(...arguments),this.Id="bitter_old_man",this.Group=n.Loners,this.Game=s.NewMoon,this.Priority=c.Initial+13,this.Description=[{title:"General",description:"Before the game begins, the narrator divides the village into two groups and announces this out loud. The division is based on obvious criteria (gender, glasses, height, age, beard, etc.). The Bitter Old Man must be able to be clearly assigned to one of the two groups. The aim of this character is to eliminate all players from the other group. In this case, and only in this case, he wins the game all by himself. He has no special ability for this - words and his ability to manipulate are his only weapons."},{title:"Hint for the narrator",description:"It is not necessary for both groups to be the same size. If in doubt, do not hesitate to point out to all players which group they belong to."}],this.GetActions=()=>[!this.isAssigned&&"Assign person","Can directly go back to sleep","Is part of one half of the village and trues to kill the other half"],this.GetButtons=()=>this.isAssigned?[]:[l(this)],this.IsAwakeThisNight=e=>e<=0;}};var K=class extends g{constructor(){super(...arguments),this.Id="primal_wolf",this.Group=n.Wolves,this.Game=s.Characters,this.Priority=c.Wolf+3,this.Description=[{title:"General",description:"Every night, the primal wolf wakes up with the other wolves and looks for a victim. After the wolves have fallen asleep, he may, if he wishes, signal to the narrator that he would like to use his special ability and infect the last victim. This ability can only be used once in the game. The narrator then touches the infected character, who immediately becomes a werewolf and wakes up with the wolves every night from the next night onwards, looking for a victim. If this character has a nocturnal special ability, the player still wakes up after being called by the narrator - in addition to the wolf phase."}],this.isDone=!1,this.GetActions=()=>[!this.isAssigned&&"Assign person","Can turn victim into a werewolf"],this.GetButtons=()=>{let e=[];return this.isAssigned||e.push(l(this)),this.isDone||e.push({Title:"Turn victim into werewolf",Action:this.requestVictimStateChangePerson.bind(this)}),e;},this.IsAwakeThisNight=(e,t)=>!(this.isDone||t.People.some(r=>r.IsDead&&this.isWerewolf(r)));}requestVictimStateChangePerson(t){return h(this,arguments,function*({GameState:e}){let r=e.People.find(a=>a.IsVictim);r&&(r.IsVictim=!1,r.IsWerewolf=!0,this.isDone=!0);});}};var M=class extends o{constructor(){super(...arguments),this.Id="scapegoat",this.Group=n.Passive,this.Game=s.NewMoon,this.Priority=c.Initial+12,this.Description=[{title:"General",description:"If the village vote results in a tie, the scapegoat is eliminated instead of the two characters with the same number of votes. It is up to him to act in such a way that this sad end is prevented. If the scapegoat is eliminated, he has one prerogative that he can exercise: He decides who gets to vote the next day and who doesn't."},{title:"Attention",description:"If only one player is chosen to vote, there is a risk that he will be devoured by the werewolves the following night. So there would be no vote in the village. (Unless, of course, the chosen player is a werewolf himself or the werewolves deliberately do not devour him)."}],this.GetActions=()=>[!this.isAssigned&&"Assign person","Can directly go to sleep","Elected in the event of a tie in voting"],this.GetButtons=()=>this.isAssigned?[]:[l(this)],this.IsAwakeThisNight=e=>e<=0;}};var H=class extends o{constructor(){super(...arguments),this.Id="seer",this.Group=n.Active,this.Game=s.BaseGame,this.Priority=c.Initial+4,this.Description=[{title:"General",description:"Every night, she recognises the true identity of a player of her choice. She must help the other villagers, but be very careful when doing so, otherwise she will be discovered by the werewolves."}],this.GetActions=()=>[!this.isAssigned&&"Assign person","Can lookup a card"],this.GetButtons=()=>this.isAssigned?[]:[l(this)],this.IsAwakeThisNight=()=>!0;}};var O=class extends o{constructor(){super(...arguments),this.Id="sisters",this.Group=n.Active,this.Game=s.Characters,this.Priority=c.Initial+6,this.IsSingle=!1,this.Description=[{title:"General",description:"The Two Sisters are the same type as the other villagers and pull in the same direction. The narrator calls the Two Sisters on the first night so that they recognise each other. In experienced game rounds, the sisters can be called again from time to time (every second round or at the discretion of the narrator) at night to quickly and quietly agree on a common course of action to save the village."},{title:"Hint for the narrator",description:"The Two Sisters are a powerful instrument in the hands of players who master sign language."}],this.GetActions=()=>[this.gameState.getPeopleForCharacter(this).length!==2&&"Assign people","May exchange information"],this.GetButtons=()=>this.gameState.getPeopleForCharacter(this).length==2?[]:[z(this,2)],this.IsAwakeThisNight=e=>e%2===0;}};var j=class extends o{constructor(){super(...arguments),this.Id="thief",this.Group=n.Active,this.Game=s.BaseGame,this.Priority=c.Initial+1,this.Description=[{title:"General",description:"If you want to play with this card, two Simple Villagers must also be added to the game before the game begins. After the cards have been dealt, the two remaining cards are placed face down in the centre of the table. On the first night, the thief looks at the two cards and may exchange his own for one of the two cards. If both cards in the centre of the table are werewolves, he must swap his card for one of the werewolf cards. He retains the identity he has now chosen until the end of the game."}],this.GetActions=()=>["Must exchange two cards",!this.isAssigned&&"Assign person"],this.GetButtons=()=>this.isAssigned?[]:[l(this)],this.IsAwakeThisNight=e=>e===0;}};var q=class extends o{constructor(){super(...arguments),this.Id="village_idiot",this.Group=n.Passive,this.Game=s.NewMoon,this.Description=[{title:"General",description:"What village doesn't have its village idiot? He does a bit of mischief, but he has such an engaging personality that nobody could hurt him. When the village votes against him, the village idiot turns his card over. The villagers instantly realise their mistake and immediately pardon him. From now on, he continues to play, but has lost his right to vote. What does the vote of an idiot count for? There is no new vote in this round. Note: If the werewolves take him, the village idiot is eliminated. If the village idiot was captain of the village, this role is lost for good. If the hunter shoots at the village idiot, the village idiot is eliminated."}];}};var Z=class extends o{constructor(){super(...arguments),this.Id="villager",this.Group=n.Passive,this.Game=s.BaseGame,this.IsSingle=!1,this.Description=[{title:"General",description:"He has no special abilities. His only weapons are his keen sense of suspicious behaviour and the ability to convince others of his innocence."}];}};var v=class extends g{constructor(){super(...arguments),this.Id="werewolf",this.Game=s.BaseGame,this.Group=n.Wolves,this.Priority=c.Wolf+1,this.IsSingle=!1,this.Description=[{title:"General",description:"Every night he eats a villager. During the day, it tries to hide its true identity. There is no way a werewolf can eat another werewolf."}],this.GetActions=()=>[this.gameState.getPeopleForCharacter(this).length<=0&&"Assign person",!this.isDone&&"Must descide on a victim"],this.GetButtons=()=>{let e=[];return this.gameState.getPeopleForCharacter(this).length<=0&&e.push(z(this)),this.isDone||e.push({Title:"Mark victim",Action:this.registerVictim.bind(this)}),e;},this.IsAwakeThisNight=()=>!0;}get isDone(){return this.gameState.People.some(e=>e.IsVictim);}registerVictim(r){return h(this,arguments,function*({Dialog:e,GameState:t}){try{let a=yield e.ShowPeopleSelectionDialog("Select the victim",1);if(a[0].IsProtected)return;t.People.forEach(d=>d.IsVictim=!1),a[0].IsVictim=!0;}catch{}});}};var L=class extends g{constructor(){super(...arguments),this.Id="white_wolf",this.Group=n.Wolves,this.Game=s.Characters,this.Priority=c.Wolf+2,this.Description=[{title:"General",description:"This vicious character loathes werewolves as much as the villagers. Every night, the white werewolf wakes up with the werewolves and seeks out a victim among the villagers. However, every other night, when called by the narrator, he wakes up alone in his own phase and may, if he likes, kill a werewolf (but no other villagers). His aim is to remain the only survivor in the village. Only in this case does he win the game."}],this.isDone=!1,this.GetActions=()=>[!this.isAssigned&&"Assign person",!this.isDone&&"Can kill a werewolf"],this.GetButtons=()=>{let e=[];return this.isAssigned||e.push(l(this)),this.isDone||e.push({Title:"Mark second victim",Action:this.registerVictim.bind(this)}),e;},this.IsAwakeThisNight=e=>e%2==1,this.resetAfterNight=()=>this.isDone=!1;}registerVictim(t){return h(this,arguments,function*({Dialog:e}){try{let r=yield e.ShowPeopleSelectionDialog("Select the victim (werewolf)",1);if(r[0].IsProtected)return;r[0].IsVictim=!0,this.isDone=!0;}catch{}});}};var U=class extends o{constructor(){super(...arguments),this.Id="wild_child",this.Group=n.Wolves,this.Game=s.Characters,this.Priority=c.Initial+8,this.Description=[{title:"General",description:"The Wild Child is a villager. On the first night, it is called by the narrator and silently chooses its role model. If this role model is killed during the course of the game, the Wild Child turns its back on the village and returns to the wolves. From now on, it wakes up as a werewolf every night until the end of the game and looks for a victim with them. As long as the role model is alive, the wild child remains a villager. Even a werewolf role model does not change this. The Wild Child can also take part in eliminating its role model if it so wishes. If his role model is in the game and all wolves have been eliminated, the child with the villagers wins. If his role model is eliminated and the wolves win, he also shares this victory."},{title:"Hint for the narrator",description:"It can increase the suspense if the true identity of the child is not revealed, should it be eliminated by the choice of village. This leaves some doubt as to whether a villager or a werewolf has been eliminated."}],this.GetActions=()=>[!this.isAssigned&&"Assign person",!this.isDone&&"Must select a role model","Becomes a werewolf when role model dies"],this.GetButtons=()=>{let e=[];return this.isAssigned?this.isDone||e.push({Title:"Assing role model",Action:this.requstRolemodel.bind(this)}):e.push(l(this)),e;},this.IsAwakeThisNight=e=>e===0;}get isDone(){return this.gameState.Connections.some(e=>e.ConnectionType===p.Trust);}requstRolemodel(r){return h(this,arguments,function*({GameState:e,Dialog:t}){try{let a=yield t.ShowPeopleSelectionDialog("Select role model",1);e.addConnection(p.Trust,this.gameState.getPeopleForCharacter(this)[0],a[0]);}catch{}});}};var J=class extends o{constructor(){super(...arguments),this.Id="witch",this.Group=n.Active,this.Game=s.BaseGame,this.Priority=c.PostWolf+1,this.Description=[{title:"General",description:"She can brew two very powerful potions: A healing potion to save a player who has fallen victim to the werewolves from death. And a poison to poison any player at night and thus eliminate them. The witch can only use these potions once during a game. She can use both potions on the same night. In the morning, after the witch has used her ability, there can therefore be no, 1 or 2 deaths (without taking into account the abilities of other characters). The witch can also use the healing potion on herself to heal herself if she has been attacked by the werewolves."}],this.hasPositivePotion=!0,this.hasNegativePotion=!0,this.GetActions=()=>[!this.isAssigned&&"Assign person",!this.hasPositivePotion&&!this.hasNegativePotion&&"Does not have any potions left",this.hasPositivePotion&&"Can use a healing potion",this.hasNegativePotion&&"Can use a death potion"],this.GetButtons=()=>{let e=[];return this.isAssigned||e.push(l(this)),this.hasPositivePotion&&e.push({Title:"Save",Action:this.requstSave.bind(this)}),this.hasNegativePotion&&e.push({Title:"Kill",Action:this.requstKill.bind(this)}),e;},this.IsAwakeThisNight=()=>this.hasPositivePotion||this.hasNegativePotion;}requstSave(r){return h(this,arguments,function*({GameState:e,Dialog:t}){try{let a=yield t.ShowPeopleSelectionDialog("Select the victim",1);if(!e.People.filter(u=>u.IsVictim).includes(a[0])&&!(yield t.ShowConfirmDialog("This person is not a victim. Use potion anyway?")))return;a[0].IsVictim=!1,this.hasPositivePotion=!1;}catch{}});}requstKill(t){return h(this,arguments,function*({Dialog:e}){try{let r=yield e.ShowPeopleSelectionDialog("Select the victim",1);if(r[0].IsVictim&&!(yield e.ShowConfirmDialog("This person is already a victim. Use potion anyway?")))return;r[0].IsVictim=!0,this.hasNegativePotion=!1;}catch{}});}};var X=class extends o{constructor(){super(...arguments),this.Id="wolfdog",this.Group=n.Wolves,this.Game=s.Characters,this.Description=[{title:"General",description:"On the first night, the wolfhound decides which side it wants to play on: as a simple villager or as a simple werewolf. If it chooses the latter, it simply opens its eyes with all the other wolves in the wolf phase and searches for a victim with them. Otherwise, he keeps his eyes closed and plays on the side of the village. This decision is final and applies for the rest of the game. It is no longer possible to change your mind later."},{title:"Hint for the narrator",description:"As with the Wild Child, it can increase the tension if the true identity of the wolfhound is not revealed, should he be eliminated by the choice of village.This leaves doubt as to whether a villager or a werewolf has been eliminated."}];}};var m=[];for(let i=0;i<256;++i)m.push((i+256).toString(16).slice(1));function le(i,e=0){return(m[i[e+0]]+m[i[e+1]]+m[i[e+2]]+m[i[e+3]]+"-"+m[i[e+4]]+m[i[e+5]]+"-"+m[i[e+6]]+m[i[e+7]]+"-"+m[i[e+8]]+m[i[e+9]]+"-"+m[i[e+10]]+m[i[e+11]]+m[i[e+12]]+m[i[e+13]]+m[i[e+14]]+m[i[e+15]]).toLowerCase();}var ie,ue=new Uint8Array(16);function te(){if(!ie){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");ie=crypto.getRandomValues.bind(crypto);}return ie(ue);}var pe=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),re={randomUUID:pe};function me(i,e,t){if(re.randomUUID&&!e&&!i)return re.randomUUID();i=i||{};let r=i.random??i.rng?.()??te();if(r.length<16)throw new Error("Random bytes length must be >= 16");if(r[6]=r[6]&15|64,r[8]=r[8]&63|128,e){if(t=t||0,t<0||t+16>e.length)throw new RangeError(`UUID byte range ${t}:${t+15} is out of buffer bounds`);for(let a=0;a<16;++a)e[t+a]=r[a];return e;}return le(r);}var Q=me;var A=class i{get Id(){return this.id;}get Name(){return this.name;}set Name(e){this.name=e,this.onChanged();}get Character(){return this.character;}set Character(e){this.character=e,this.onChanged();}get IsProtected(){return this.isProtected;}set IsProtected(e){this.isProtected=e,this.onChanged();}get IsVictim(){return this.isVictim;}set IsVictim(e){this.isVictim=e,this.onChanged();}get IsEnchanted(){return this.isEnchanted;}set IsEnchanted(e){this.isEnchanted=e,this.onChanged();}get IsWerewolf(){return this.isWerewolf;}set IsWerewolf(e){this.isWerewolf=e,this.onChanged();}get IsDead(){return this.isDead;}set IsDead(e){this.isDead=e,this.onChanged();}constructor(e=()=>{}){this.onChanged=e,this.id=Q(),this.name="",this.isProtected=!1,this.isVictim=!1,this.isEnchanted=!1,this.isWerewolf=!1,this.isDead=!1;}resetPerson(){this.isProtected=!1,this.isVictim=!1,this.isEnchanted=!1,this.isWerewolf=!1,this.isDead=!1,this.character=void 0;}cloneWithoutEffectState(){let e=new i();return e.id=this.id,e.name=this.name,e.character=this.character,e;}asSerializeable(){return{id:this.id,name:this.name,isProtected:this.isProtected,isVictim:this.isVictim,isEnchanted:this.isEnchanted,isWerewolf:this.isWerewolf,isDead:this.isDead,character:this.character?.Id};}static fromSerializeable(e,t=()=>{}){let r=new i(t);return r.id=e.id??Q(),r.name=e.name??"",r.isProtected=e.isProtected??!1,r.isVictim=e.isVictim??!1,r.isEnchanted=e.isEnchanted??!1,r.isWerewolf=e.isWerewolf??!1,r.isDead=e.isDead??!1,r.character=e.character??void 0,r;}};var $=class i{get Round(){return this.round;}set Round(e){this.round=e,this.onChanged();}get People(){return this.people;}set People(e){this.people=e,this.onChanged();}get SelectedCharacters(){return this.selectedCharacters;}set SelectedCharacters(e){this.selectedCharacters=e,this.onChanged();}get Connections(){return this.connections;}set Connections(e){this.connections=e,this.onChanged();}constructor(e=()=>{}){this.onChanged=e,this.round=0,this.people=[],this.selectedCharacters=[],this.connections=[];}serialize(){return JSON.stringify({round:this.round,people:this.people.map(e=>e.asSerializeable()),selectedCharacters:this.selectedCharacters.map(e=>e.Id),connections:this.connections.map(e=>ne(G({},e),{From:e.From.Id,To:e.To.Id}))});}static deserialize(e,t,r=()=>{}){let a=new i(r);if(e){let d=JSON.parse(e,(u,w)=>u==="character"?t.find(D=>D.Id===w):u==="people"?w.map(D=>A.fromSerializeable(D,r)):u==="selectedCharacters"?w.map(D=>t.find(he=>he.Id===D)):w);a.round=d.round,a.people=d.people,a.selectedCharacters=d.selectedCharacters,a.connections=(d.connections??[]).map(u=>({ConnectionType:u?.ConnectionType??p.Love,From:d.people.find(w=>w.Id===u?.From),To:d.people.find(w=>w.Id===u?.To)})).filter(u=>u.From&&u.To);}return a;}reset(e){this.round=0,this.connections=[];for(let t of this.people)t.resetPerson();this.selectedCharacters=e,this.onChanged();}};var Y=class extends o{constructor(){super(...arguments),this.Id="judge",this.Group=n.Passive,this.Game=s.Characters,this.Description=[{title:"General",description:"Once during the game, the judge may decide that a further vote of the village with a second victim will take place during the day. He lets the narrator know this with a previously agreed special sign during the first vote of the villagers. This second vote takes place directly after the first - without further discussion. The \"St-t-t- uttering Judge\" agrees this sign with the narrator while he is called on the first night."},{title:"Hint for the narrator",description:"Always keep a close eye on the stuttering judge so as not to miss his sign."}],this.Priority=c.Initial+14,this.GetActions=()=>[!this.isAssigned&&"Assign person","Must agree on a sign with narrator","Can request a second vote by making the sign"],this.GetButtons=()=>this.isAssigned?[]:[l(this)],this.IsAwakeThisNight=e=>e<=0;}};var ee=class extends o{constructor(){super(...arguments),this.Id="maid",this.Group=n.Passive,this.Game=s.Characters,this.Description=[{title:"General",description:"Before the narrator reveals the card of a player who has been eliminated from the game by choosing the village, the Handmaid may reveal herself by revealing her card. In this case, the handmaiden's player loses his card and receives the character of the player who is eliminated in return. This character is not shown to the other players and remains in the possession of the player who formerly embodied the handmaiden until that player leaves or the game ends."},{title:"Attention",description:"If the maid belongs to the lovers, she no longer has this decision. The power of love is greater than the will to change character."},{title:"Hint for the narrator",description:"Take your time before showing the eliminated character to the players so that you give the maid the opportunity to reveal herself. If she takes over a character with special abilities, she will be called according to the character the following nights. On the first night in particular, you should quietly point this out to the former maid so that she can get used to her new role. As a general rule, all special abilities of the character that the Handmaiden receives are renewed and the character is played as if it were the first night. In return, any effect that may have previously been on the eliminated player is cancelled."},{title:"Explanations",description:"If the eliminated player was or is infected, enamoured, enchanted, captain, beadle or Cupid, the former Handmaid will not be. If the former Handmaiden was enchanted, Captain or Beadle, she is no longer so. If the former Devoted Maid was: infected, she is still; flute player, the narrator tells this new flute player which players were previously enchanted; juggler, beadle or gypsy: No additional cards are dealt; only the cards that have not yet been used continue to be used."}];}};var tn=(()=>{class i{get Round(){return this.gameState.Round;}get Connections(){return this.gameState.Connections;}get AllCharacters(){return this.allCharacters;}get People(){return this.gameState.People;}set People(t){this.gameState.People=t,this.saveState();}get SelectedCharacters(){return this.gameState.SelectedCharacters;}set SelectedCharacters(t){this.gameState.SelectedCharacters=t,this.saveState();}get InGame(){return this.appState.inGame;}set InGame(t){this.appState.inGame=t,this.saveState();}get MusicStarted(){return this.appState.spotify.musicStarted;}set MusicStarted(t){this.appState.spotify.musicStarted=t,this.saveState();}get CurrentDeviceId(){return this.appState.spotify.currentDevice;}set CurrentDeviceId(t){this.appState.spotify.currentDevice=t,this.saveState();}constructor(){if(this.allCharacters=[],this.gameState=new $(this.saveState.bind(this)),this.appState={inGame:!1,spotify:{musicStarted:!1,currentDevice:void 0}},this.Actions=[],this.ActionHistory=[],this.Changes=[],this.resetCharacters(),!oe.isTesting)try{this.gameState=$.deserialize(window.localStorage.getItem("werewolf-game-state"),this.allCharacters,this.saveState.bind(this)),this.Actions=this.getActionsForNight(),this.appState=G({inGame:!1,spotify:{musicStarted:!1,currentDevice:void 0}},JSON.parse(window.localStorage.getItem("werewolf-app-state")??"{}")),window.state={game:this.gameState,app:this.appState};}catch{window.localStorage.removeItem("werewolf-game-state");}}addPerson(){let t=new A(this.saveState.bind(this));this.gameState.People=[...this.gameState.People,t];}removePerson(t){this.gameState.People=this.gameState.People.filter(r=>r!==t);}addConnection(t,r,a){this.gameState.Connections=[...this.gameState.Connections.filter(d=>d.ConnectionType!==t),{ConnectionType:t,From:r,To:a}],this.saveState();}removeConnection(t){this.gameState.Connections=this.gameState.Connections.filter(r=>r.ConnectionType!==t),this.saveState();}startGame(){this.InGame=!0,this.resetGame(),this.Actions=[],this.ActionHistory=[],this.Actions=this.getActionsForNight();}startNextRound(){this.gameState.Round++;for(let t of this.gameState.SelectedCharacters)t.resetAfterNight();this.ActionHistory=[],this.Actions=this.getActionsForNight(),this.saveState();}getActionsForNight(){return[...(this.gameState.Round===0?[new P(this)]:[]),ce,...this.SelectedCharacters.filter(this.filterActiveActions.bind(this)).sort((t,r)=>t.Priority-r.Priority),new C(this)];}filterActiveActions(t){if(t instanceof v)return!0;if(!t.IsAwakeThisNight(this.gameState.Round,this))return!1;let r=this.getPeopleForCharacter(t);return!(r.length>0&&r.every(a=>a.IsDead));}getPeopleForCharacter(t){return this.gameState.People.filter(r=>r.Character===t);}resetGame(){this.resetCharacters();let t=this.gameState.SelectedCharacters.map(a=>a.Id),r=this.allCharacters.filter(a=>t.includes(a.Id));this.gameState.reset(r);}resetCharacters(){this.allCharacters=[new k(this),new b(this),new W(this),new I(this),new y(this),new T(this),new x(this),new N(this),new V(this),new B(this),new Y(this),new E(this),new _(this),new ee(this),new R(this),new F(this),new K(this),new M(this),new H(this),new O(this),new S(this),new j(this),new q(this),new Z(this),new v(this),new L(this),new U(this),new J(this),new X(this)];}saveState(){window.localStorage.setItem("werewolf-game-state",this.gameState.serialize()),window.localStorage.setItem("werewolf-app-state",JSON.stringify(this.appState));}nextAction(){let t=this.Actions.shift();t&&(this.ActionHistory.push(t),this.Actions.length<=0?this.startNextRound():this.Actions.length===1&&(this.Changes=this.getChangesOnNightOver(),this.ActionHistory=[]));}previousAction(){let t=this.ActionHistory.pop();t&&this.Actions.unshift(t);}getChangesOnNightOver(){let t=[];t.push(...this.getVictimChanges());let r=t.map(a=>a.person);for(let a of r)t.push(...this.handleConsequenceofDeath(a));return t;}handleConsequenceofDeath(t,r=!1,a=!1){let d=[];if(!a){let u=this.getLoveConnectionChanges(t);a=!!u,d.push(u);}if(d.push(this.getTrustConnectionChanges(t)),!r){d.push(this.getSleepoverConnectionChanges(t));let u=d.filter(Boolean).map(w=>this.handleConsequenceofDeath(w.person,!0,a)).flat();d.push(...u);}return d.filter(Boolean);}getVictimChanges(){let t=[];for(let r of this.People)r.IsVictim&&!r.IsProtected&&t.push({person:r,reason:f.DiedGotKilled,isApplied:!1,apply:()=>{r.IsVictim=!1,r.IsDead=!0;}});return t;}getSleepoverConnectionChanges(t){let r=this.Connections.find(a=>a.ConnectionType===p.Sleepover);if(r?.To===t)return{person:r.From,reason:f.DiedSleptWithVictim,isApplied:!1,apply:()=>{r.From.IsDead=!0;}};}getTrustConnectionChanges(t){let r=this.Connections.find(a=>a.ConnectionType===p.Trust);if(r?.To===t)return{person:r.From,reason:f.TurnedIntoWolf,isApplied:!1,apply:()=>{r.From.IsWerewolf=!0;}};}getLoveConnectionChanges(t){let r=this.Connections.find(a=>a.ConnectionType===p.Love);if(r?.From===t||r?.To===t){let a=r.From===t?r.To:r.From;return{person:a,reason:f.DiedOfBrokenHeart,isApplied:!1,apply:()=>{a.IsDead=!0;}};}}static{this.ɵfac=function(r){return new(r||i)();};}static{this.ɵprov=se({token:i,factory:i.ɵfac,providedIn:"root"});}}return i;})();export{p as a,n as b,s as c,de as d,ae as e,we as f,ze as g,be as h,oe as i,tn as j};/**i18n:4d237bd4a7924989e9147be91c316aeb32cdd902c29b123d66e18fd31eb96ec1*/